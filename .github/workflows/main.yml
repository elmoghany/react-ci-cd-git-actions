name: React-expo-CI-CD
on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]
jobs:
  # Android-setup-Building:
  #   runs-on: ubuntu-latest
  #   steps:
  #   - name: Checkout Repository
  #     uses: actions/checkout@v3

  #   - name: setup Node.js v.20.10.0 -> u can change me if u want!
  #     uses: actions/setup-node@v3
  #     with:
  #       node-version: '20.10.0'
        
  #   - name: install expo
  #     run: npm install expo

  #   - name: install expo dependencies
  #     run: npx expo install react-dom react-native-web @expo/webpack-config

  #   - name: Prebuild ANDROID expo project 
  #     run: npx expo prebuild --platform android
      
  #   - name: Decode Keystore
  #     run: |
  #       mkdir -p ./android/app
  #       echo "${{ secrets.KEYSTORE }}" | base64 --decode > ./android/app/my-release-key.keystore

  #   - name: Update gradle.properties
  #     run: |
  #       cd ./android
  #       echo "KEYSTORE_PATH=my-release-key.keystore" >> gradle.properties
  #       echo "KEYSTORE_PASSWORD=${{ secrets.KEYSTORE_PASSWORD }}" >> gradle.properties
  #       echo "KEY_ALIAS=${{ secrets.ALIAS }}" >> gradle.properties
  #       echo "KEY_PASSWORD=${{ secrets.KEY_PASSWORD }}" >> gradle.properties
  #       cat gradle.properties

  #   - name: Update build.gradle
  #     run: |
  #       cd android
  #       sed -i '/signingConfigs {/a \        release {\n            storeFile file(KEYSTORE_PATH)\n            storePassword KEYSTORE_PASSWORD\n            keyAlias KEY_ALIAS\n            keyPassword KEY_PASSWORD\n        }' app/build.gradle
  #       sed -i 's/signingConfig signingConfigs.debug/signingConfig signingConfigs.release/' app/build.gradle
  #       cat ./app/build.gradle

  #   #assembleRelease => apk
  #   #bundleRelease => aab
  #   - name: Build and Sign Release without expo => using prebuild files
  #     env:
  #        KEYSTORE_PATH: ./android/app/my-release-key.keystore
  #        KEYSTORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}
  #        KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}
  #        KEY_ALIAS: ${{ secrets.ALIAS }}
  #     run: cd ./android && ./gradlew bundleRelease

  #   - name: upload artifact to git actions
  #     uses: actions/upload-artifact@v4
  #     with:
  #       name: app-release.aab
  #       path: ./android/app/build/outputs/bundle/release/app-release.aab

  #   - name: upload artifact to google play
  #     uses: r0adkll/upload-google-play@v1
  #     with:
  #       serviceAccountJsonPlainText: ${{ secrets.SERVICE_ACCOUNT_JSON }}
  #       packageName: com.elmoghany.free_cicd_for_react_expo
  #       releaseFiles: ./android/app/build/outputs/bundle/release/app-release.aab
  #       track: internal
  #       status: draft  # Set the status to draft
                #inProgress
    #     inAppUpdatePriority: 2
    #     userFraction: 0.33
    #     whatsNewDirectory: distribution/whatsnew

#######################################################################
#######################################################################
#######################################################################

  iOS-setup-cd-and-npx-react-native-build-ios-mode-Release:
    runs-on: macos-latest
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v3

    - name: setup Node.js v.20.10.0 -> u can change me if u want!
      uses: actions/setup-node@v3
      with:
        node-version: '20.10.0'
        
    - name: install expo
      run: npm install expo

    - name: install expo dependencies
      run: npx expo install react-dom react-native-web @expo/webpack-config

    - name: Install CocoaPods
      run: sudo gem install cocoapods

    - name: Prebuild ios expo project 
      run: npx expo prebuild --platform ios

    - name: Set up Xcode version (optional)
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: '13.2.1' # Set your Xcode version here
        
    - name: Install Pods & list all files & folders
      run: |
          cd ios && pod install
          ls -lt

    - name: Create ExportOptions.plist
      run: |
          mkdir -p ios/Configurations 
          cd ios/Configurations
          echo '<?xml version="1.0" encoding="UTF-8"?>' > ExportOptions.plist
          echo '<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">' >> ExportOptions.plist
          echo '<plist version="1.0">' >> ExportOptions.plist
          echo '<dict>' >> ExportOptions.plist
          echo '    <key>compileBitcode</key>' >> ExportOptions.plist
          echo '    <false/>' >> ExportOptions.plist
          echo '    <key>method</key>' >> ExportOptions.plist
          echo '    <string>development</string>' >> ExportOptions.plist
          echo '    <key>signingStyle</key>' >> ExportOptions.plist
          echo '    <string>automatic</string>' >> ExportOptions.plist
          echo '    <key>stripSwiftSymbols</key>' >> ExportOptions.plist
          echo '    <true/>' >> ExportOptions.plist
          echo '    <key>teamID</key>' >> ExportOptions.plist
          echo '    <string>${{ secrets.IOS_TEAM_ID }}</string>' >> ExportOptions.plist
          echo '    <key>thinning</key>' >> ExportOptions.plist
          echo '    <string>&lt;none&gt;</string>' >> ExportOptions.plist
          echo '    <key>iCloudContainerEnvironment</key>' >> ExportOptions.plist
          echo '    <string>Development</string>' >> ExportOptions.plist
          echo '</dict>' >> ExportOptions.plist
          echo '</plist>' >> ExportOptions.plist
          
    - name: build without expo => using prebuild files
      run:  |
          cd ios
          mkdir my-archive-path
          xcodebuild clean archive -workspace reactcicdgitactions.xcworkspace -scheme reactcicdgitactions -archivePath my-archive-path/my-archive.xcarchive DEVELOPMENT_TEAM=4NM4NNL8ZG -allowProvisioningUpdates | xcpretty
          ls -lt
          ls -lt my-archive-path

        
#######################################################################
#######################################################################
#######################################################################
#######################################################################


  #   - name: build without expo => using prebuild files
  #     run: npx react-native build-ios
        # npx react-native build-ios --mode Release
  #           #--configuration Release
  #     run: bundle install && bundle exec pod install


######################################
    # - name: install tree
    #   run: npm install tree-node-cli

    # - name: check files created
    #   run: tree -dS


###################################
    # - name: aws s3 env
    #   run: |
    #        aws s3 cp ./app.json s3://moghany-vprofile-kops-state/react-cicd-apk/
    #   env:
    #     AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY }}
    #     AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_KEY }}
    #     AWS_REGION: 'us-east-1'
    #     AWS_S3_BUCKET: 'moghany-vprofile-kops-state'

    # - name: setup & run local server
    #   run: |
    #        npm install http-server


###########turtle cli##############
    # - name: Install Turtle CLI
    #   run: npm install -g turtle-cli
    
    # - name: Setup Android Keystore
    #   env:
    #     KEYSTORE_BASE64: ${{ secrets.KEYSTORE_BASE64 }}
    #     KEYSTORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}
    #     KEY_ALIAS: ${{ secrets.KEY_ALIAS }}
    #   run: |
    #     echo $KEYSTORE_BASE64 | base64 --decode > ./my-release-key.keystore
           
    # - name: Build APK with turtle cli
    #   run: |
    #     turtle build:android \
    #       --keystore-path ./my-release-key.keystore \
    #       --keystore-alias $KEY_ALIAS \
    #       --keystore-password $KEYSTORE_PASSWORD \
    #       --type apk \
    #       --allow-non-https-public-url \
    #       --public-url http://127.0.0.1:8000
    #       # -o .

######################      
    # # Deploy to S3
    # - name: Deploy to S3
    #   run: |
    #     aws s3 cp path/to/generated/apk/ s3://moghany-vprofile-kops-state/react-cicd-apk/ --recursive
    #   env:
    #     AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY }}
    #     AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_KEY }}
    #     AWS_REGION: 'us-east-1'

    # - name: Upload Artifacts
    #   uses: actions/upload-artifact@v2
    #   with:
    #     name: my-react-expo-cicd-files
    #     path: my-cicd-files

    #you can also use these flags in the following compile cmd --variant debug or --variant release
#    - name: Build for android
#      run: npx expo run:ios --no-build-cache
