name: React-expo-CI-CD
on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]
jobs:
  Android-setup-Building:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v3

    - name: setup Node.js v.20.10.0 -> u can change me if u want!
      uses: actions/setup-node@v3
      with:
        node-version: '20.10.0'
        
    - name: install expo
      run: npm install expo

    - name: install expo dependencies
      run: npx expo install react-dom react-native-web @expo/webpack-config

    - name: Prebuild ANDROID expo project 
      run: npx expo prebuild --platform android
      
    - name: Decode Keystore
      run: |
        mkdir -p ./android/app
        echo "${{ secrets.KEYSTORE }}" | base64 --decode > ./android/app/my-release-key.keystore

# If you want to sign the APK and publish to Google Play Store.
    - name: Build and Sign Release without expo => using prebuild files
      env:
         KEYSTORE_PATH: ./app/my-release-key.keystore
         KEYSTORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}
         KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}
         KEY_ALIAS: ${{ secrets.ALIAS }}
      run: cd android && ./gradlew clean

    - name: current path
      run:  pwd

    - name: check keystore variables @ build.gradle
      run:  ls -lt

    - name: Build and Sign Release without expo => using prebuild files
      env:
         KEYSTORE_PATH: ./app/my-release-key.keystore
         KEYSTORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}
         KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}
         KEY_ALIAS: ${{ secrets.ALIAS }}
      run: ./gradlew assembleRelease

    - name: check keystore variables @ build.gradle
      run:  ls -lt
           
    - name: check if aab file was generated
      run: ls -lt ./app/build/outputs/bundle/release/

    - name: upload artifact to git actions
      uses: actions/upload-artifact@v4
      with:
        name: app-release.aab
        path: ./app/build/outputs/bundle/release/app-release.aab

    - name: upload artifact to google play
      uses: r0adkll/upload-google-play@v1
      with:
        serviceAccountJsonPlainText: ${{ secrets.SERVICE_ACCOUNT_JSON }}
        packageName: com.cammedar.free_cicd_for_react_expo
        releaseFiles: ./app/build/outputs/bundle/release/app-release.aab
        track: internal

#######################################################################
#######################################################################
#######################################################################

    # - name: Upload Android Release to Play Store
    #   uses: r0adkll/upload-google-play@v1.1.2
    #   with: 
    #     serviceAccountJsonPlainText: ${{ SERVICE_ACCOUNT_JSON }}
    #     packageName: com.example.MyApp
    #     releaseFiles: android/app/build/outputs/bundle/release/app-release.aab
    #     track: production
    #     status: inProgress
    #     whatsNewDirectory: distribution/whatsnew
    #     inAppUpdatePriority: 2
    #     userFraction: 0.33

#######################################################################
#######################################################################
#######################################################################

  # iOS-setup-cd-and-npx-react-native-build-ios-mode-Release:
  #   runs-on: macos-latest
  #   steps:
  #   - name: Checkout Repository
  #     uses: actions/checkout@v3

  #   - name: setup Node.js v.20.10.0 -> u can change me if u want!
  #     uses: actions/setup-node@v3
  #     with:
  #       node-version: '20.10.0'
        
  #   - name: install expo
  #     run: npm install expo

  #   - name: install expo dependencies
  #     run: npx expo install react-dom react-native-web @expo/webpack-config

  #   - name: Install CocoaPods
  #     run: sudo gem install cocoapods

  #   - name: Prebuild ios expo project 
  #     run: npx expo prebuild --platform ios

  #   - name: Install Pods
  #     run: cd ios && pod install

  #   - name: Set up Xcode version (optional)
  #     uses: maxim-lobanov/setup-xcode@v1
  #     with:
  #       xcode-version: '13.2.1' # Set your Xcode version here

  #   - name: build without expo => using prebuild files
  #     run: npx react-native build-ios --mode Release
  #           #--configuration Release

  #   - name: check if ipa file was generated
  #     run: |
  #       ls -ltr ./*.xcworkspace
  #       ls -ltr ./*.xcarchive
        
###################################################
#######################################################################
#######################################################################
#######################################################################

    # - name: Upload Android Release to Play Store
    #   uses: r0adkll/upload-google-play@v1.1.2
    #   with: 
    #     serviceAccountJsonPlainText: ${{ SERVICE_ACCOUNT_JSON }}
    #     packageName: com.example.MyApp
    #     releaseFiles: android/app/build/outputs/bundle/release/app-release.aab
    #     track: production
    #     status: inProgress
    #     whatsNewDirectory: distribution/whatsnew
    #     inAppUpdatePriority: 2
    #     userFraction: 0.33

#######################################################################
#######################################################################
#######################################################################

  # iOS-setup-bundle-install-bundle-exec-pod-install:
  #   runs-on: macos-latest
  #   steps:
  #   - name: Checkout Repository
  #     uses: actions/checkout@v3

  #   - name: setup Node.js v.20.10.0 -> u can change me if u want!
  #     uses: actions/setup-node@v3
  #     with:
  #       node-version: '20.10.0'
        
  #   - name: install expo
  #     run: npm install expo

  #   - name: install expo dependencies
  #     run: npx expo install react-dom react-native-web @expo/webpack-config

  #   - name: Install CocoaPods
  #     run: sudo gem install cocoapods

  #   - name: Prebuild ios expo project 
  #     run: npx expo prebuild --platform ios

  #   - name: Install Pods
  #     run: cd ios && pod install

  #   - name: Set up Xcode version (optional)
  #     uses: maxim-lobanov/setup-xcode@v1
  #     with:
  #       xcode-version: '13.2.1' # Set your Xcode version here

  #   - name: build without expo => using prebuild files
  #     run: bundle install && bundle exec pod install
  #           #--configuration Release

  #   - name: check if ipa file was generated
  #     run: |
  #       ls -ltr ./*.xcworkspace
  #       ls -ltr ./*.xcarchive

#######################################################################
#######################################################################
#######################################################################

  # iOS-setup-npx-react-native-build-ios:
  #   runs-on: macos-latest
  #   steps:
  #   - name: Checkout Repository
  #     uses: actions/checkout@v3

  #   - name: setup Node.js v.20.10.0 -> u can change me if u want!
  #     uses: actions/setup-node@v3
  #     with:
  #       node-version: '20.10.0'
        
  #   - name: install expo
  #     run: npm install expo

  #   - name: install expo dependencies
  #     run: npx expo install react-dom react-native-web @expo/webpack-config

  #   - name: Install CocoaPods
  #     run: sudo gem install cocoapods

  #   - name: Prebuild ios expo project 
  #     run: npx expo prebuild --platform ios

  #   - name: Install Pods
  #     run: cd ios && pod install

  #   - name: Set up Xcode version (optional)
  #     uses: maxim-lobanov/setup-xcode@v1
  #     with:
  #       xcode-version: '13.2.1' # Set your Xcode version here

  #   - name: build without expo => using prebuild files
  #     run: npx react-native build-ios
  #           #--configuration Release

  #   - name: check if ipa file was generated
  #     run: |
  #       ls -ltr ./*.xcworkspace
  #       ls -ltr ./*.xcarchive

######################################
    # - name: install tree
    #   run: npm install tree-node-cli

    # - name: check files created
    #   run: tree -dS


###################################
    # - name: aws s3 env
    #   run: |
    #        aws s3 cp ./app.json s3://moghany-vprofile-kops-state/react-cicd-apk/
    #   env:
    #     AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY }}
    #     AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_KEY }}
    #     AWS_REGION: 'us-east-1'
    #     AWS_S3_BUCKET: 'moghany-vprofile-kops-state'

    # - name: setup & run local server
    #   run: |
    #        npm install http-server


###########turtle cli##############
    # - name: Install Turtle CLI
    #   run: npm install -g turtle-cli
    
    # - name: Setup Android Keystore
    #   env:
    #     KEYSTORE_BASE64: ${{ secrets.KEYSTORE_BASE64 }}
    #     KEYSTORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}
    #     KEY_ALIAS: ${{ secrets.KEY_ALIAS }}
    #   run: |
    #     echo $KEYSTORE_BASE64 | base64 --decode > ./my-release-key.keystore
           
    # - name: Build APK with turtle cli
    #   run: |
    #     turtle build:android \
    #       --keystore-path ./my-release-key.keystore \
    #       --keystore-alias $KEY_ALIAS \
    #       --keystore-password $KEYSTORE_PASSWORD \
    #       --type apk \
    #       --allow-non-https-public-url \
    #       --public-url http://127.0.0.1:8000
    #       # -o .

######################      
    # # Deploy to S3
    # - name: Deploy to S3
    #   run: |
    #     aws s3 cp path/to/generated/apk/ s3://moghany-vprofile-kops-state/react-cicd-apk/ --recursive
    #   env:
    #     AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY }}
    #     AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_KEY }}
    #     AWS_REGION: 'us-east-1'

    # - name: Upload Artifacts
    #   uses: actions/upload-artifact@v2
    #   with:
    #     name: my-react-expo-cicd-files
    #     path: my-cicd-files

    #you can also use these flags in the following compile cmd --variant debug or --variant release
#    - name: Build for android
#      run: npx expo run:ios --no-build-cache
